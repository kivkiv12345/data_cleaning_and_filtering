#!env/bin/python3
"""
Find maalepinde in .xlsx document
"""
from __future__ import annotations

import os
import re
import nltk
import string
import pandas as pd
from enum import Enum
from os.path import abspath
from nltk.corpus import stopwords
from pandas import DataFrame, Series
from typing import Hashable, Sequence
from maalepinde.excel_parser import parse_excel


EXCEL_FILE: str = 'Fagtabel_Excel_2023_all.xlsx'


# Match the text in the "MÅLEPINDE" field.
# Generated by our one-and-only ChatGPT.
MAALEPIND_PATTERN = re.compile(r'(\d+\.)(.+?\n*\n)')


# class ColumnNames(Enum):
_FAGNUMMER_COLUMN_NAME: str = 'NUMMER'
_MAALEPINDE_COLUMN_NAME: str = 'MÅLPINDE'
_NIVEAU_COLUMN_NAME: str = 'NIVEAU'
_FAGKATEGORI_COLUMN_NAME: str = 'FAGKATEGORI'
_RESULTATFORM_COLUMN_NAME: str = 'RESULTATFORM'


# We use a tuple, instead of a dict,
# so the order of the subject level becomes directly tied to its location in the tuple.
# We accept the fact that lookups are likely slightly slower than they would've been in a dict.
# Order is the lowest score first.
LEVEL_ORDER: tuple[str, ...] = (
    '-',
    '2',
    '3',
    '4',
    'C',
    'B',
    'A',
)


def filter_best(df: DataFrame) -> DataFrame:
    """
    Filter the DataFrame to keep only the highest scoring instance of each "NUMMER".

    Parameters:
    - df (pd.DataFrame): DataFrame with "NUMMER" and "NIVEAU" columns.

    Returns:
    - pd.DataFrame: A DataFrame containing the highest scoring instances of each "NUMMER".
    """
    # Convert "NIVEAU" column to categorical with custom order
    df[_NIVEAU_COLUMN_NAME] = pd.Categorical(df[_NIVEAU_COLUMN_NAME], categories=LEVEL_ORDER, ordered=True)

    # Sort DataFrame by "NIVEAU" in descending order
    df = df.sort_values(by=[_FAGNUMMER_COLUMN_NAME, _NIVEAU_COLUMN_NAME], ascending=[True, False])

    # Drop duplicates keeping the first occurrence (highest scoring)
    df = df.drop_duplicates(subset=_FAGNUMMER_COLUMN_NAME, keep='first')

    return df


def remove_maalepind_clutter(df: DataFrame, remove_number_prefix=True, remove_stopwords=True, remove_punctuation=True) -> DataFrame:
    """
    Remove maalepind clutter such as stopwords and punctuation.

    :param df: DataFrame with "MAALEPIND" column.
    :param remove_number_prefix: Whether to remove the number preceding every maalepind.
    :param remove_stopwords: Whether to remove stopwords from every maalepind.
    :param remove_punctuation: Whether to remove punctuation from every maalepind.
    :return: A DataFrame where the MÅLPINDE columns has been altered.
    """

    nltk.download('stopwords')

    # set() for fast lookups of stopwords
    stopword_set = set(stopwords.words('danish'))

    def process_maalepind(maalepind: str) -> str:

        if remove_number_prefix:
            maalepind = MAALEPIND_PATTERN.sub(lambda m: (m.group(2)), maalepind)

        if remove_stopwords:
            maalepind = ' '.join(word for word in maalepind.split(' ') if word.lower().strip() not in stopword_set)

        if remove_punctuation:
            maalepind = maalepind.translate(str.maketrans('', '', string.punctuation))

        return maalepind.strip()

    df[_MAALEPINDE_COLUMN_NAME] = df[_MAALEPINDE_COLUMN_NAME].apply(process_maalepind)
    return df


def hent_maalepinde(excel_file: str) -> DataFrame:
    """
    Simply calls parse_excel() but with the arguments desired for retrieving maalepinde.
    :param excel_file: Name (and path) of the Excel containing the maalepinde.
    :return: DataFrame with the maalepinde.
    """

    df: DataFrame = parse_excel(excel_file, sheet='Datatekniker med speciale i pro', FAGKATEGORI='Uddannelsesspecifikke fag', RESULTATFORM='-/STA/7TRIN')

    return df


if __name__ == '__main__':

    # Don't use root of package as cwd
    os.chdir(os.path.dirname(os.path.realpath(__file__)))

    df: DataFrame = hent_maalepinde(EXCEL_FILE)

    df = filter_best(df)
    # If we count the number of maalepinde before removing clutter, we can use our regex pattern.
    print(f"Num maalepinde:\t\t{sum(1 for maalepinde in df[_MAALEPINDE_COLUMN_NAME] for match in MAALEPIND_PATTERN.finditer(maalepinde))}")
    df: DataFrame = remove_maalepind_clutter(df)
    print(f"Num fags:\t\t\t{len(df)}")
    print(f"Num words:\t\t\t{sum(len(nltk.word_tokenize(maalepinde)) for maalepinde in df[_MAALEPINDE_COLUMN_NAME])}")

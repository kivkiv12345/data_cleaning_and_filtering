#!env/bin/python3
"""
Find maalepinde in .xlsx document
"""
from __future__ import annotations

import re

import nltk
import pandas as pd
from enum import Enum

from .utils import MAALEPINDE_FORMAT
from .visualization_and_wordcloud import draw_diagram_words_used, remove_stopwords, word_cloud
from pandas import DataFrame, Series
from typing import Hashable, Sequence

EXCEL_FILE: str = 'Fagtabel_Excel_2023_all.xlsx'

excel_file = 'Fagtabel_Excel_2023_all.xlsx'

# Match the text in the "MÅLEPINDE" field.
# Generated by our one-and-only ChatGPT.
MAALEPIND_PATTERN = re.compile(r'\d+\.\s(.+?)\n')


class ColumnNames(Enum):
    FAGNUMMER_COLUMN_NAME: str = 'NUMMER'
    MAALEPINDE_COLUMN_NAME: str = 'MÅLPINDE'
    SCORE_COLUMN_NAME: str = 'NIVEAU'
    FAGKATEGORI_COLUMN_NAME: str = 'FAGKATEGORI'
    RESULTATFORM_COLUMN_NAME: str = 'RESULTATFORM'


# We use a tuple, instead of a dict,
# so the order of the subject level becomes directly tied to its location in the tuple.
# We accept the fact that lookups are likely slightly slower than they would've been in a dict.
# Order is the lowest first.
LEVEL_ORDER: tuple[str, ...] = (
    '-',
    '2',
    '3',
    '4',
    'C',
    'B',
    'A',
)


def hent_maalepinde(excel_file: str, fagnr: int | Sequence[int] = None, sheet: str | int = None, only_best: bool = False) -> MAALEPINDE_FORMAT:
    """
    Find maalepinde for the provided fagnr in an .xlsx file.

    Currently, maalepinde for the provided fagnr across all sheets in the document,

    :param fagnr: fagnr of which the maalepinde should be found.
    :return: List of string maalepinde, stripped of \r\n\n and numberings
    """

    df: dict[str, DataFrame] = pd.read_excel(excel_file, sheet_name=sheet)

    if sheet is not None:
        df = {'': df}

    # Stores all maalepinde for the provided fagnr,
    # of which we will find the ones with the higest score.
    tmp_maalepinde: dict[int, set[tuple[int, str]]] = {}

    if isinstance(fagnr, (int, str)):
        fagnr = {str(fagnr), }
    elif fagnr is not None:
        assert isinstance(fagnr, Sequence)
        fagnr = {str(fagnr) for fagnr in fagnr}

    for sheet in df.values():

        # Find the index of our desired columns once per sheet,
        # in case sheets are formatted differently.
        # This approach should support an arbritrary number of lines above the headers.
        # But it does assert the column names in the header, and that the values come below the headers.
        fagnummer_column_idx: int = None
        maalpinde_column_idx: int = None
        score_column_idx: int = None
        fagkategori_column_idx: int = None
        resultatform_column_idx: int = None

        row: tuple[Hashable, Series]
        for row in sheet.iterrows():

            for index, column in enumerate(row[1]):

                match column:
                    case ColumnNames.FAGNUMMER_COLUMN_NAME.value:
                        assert fagnummer_column_idx is None, \
                            'There is probably something wrong if we find our header multiple times'
                        fagnummer_column_idx = index
                    case ColumnNames.MAALEPINDE_COLUMN_NAME.value:
                        assert maalpinde_column_idx is None, \
                            'There is probably something wrong if we find our header multiple times'
                        maalpinde_column_idx = index
                    case ColumnNames.SCORE_COLUMN_NAME.value:
                        assert score_column_idx is None, \
                            'There is probably something wrong if we find our header multiple times'
                        score_column_idx = index
                    case ColumnNames.FAGKATEGORI_COLUMN_NAME.value:
                        assert fagkategori_column_idx is None, \
                            'There is probably something wrong if we find our header multiple times'
                        fagkategori_column_idx = index
                    case ColumnNames.RESULTATFORM_COLUMN_NAME.value:
                        assert resultatform_column_idx is None, \
                            'There is probably something wrong if we find our header multiple times'
                        resultatform_column_idx = index

                if fagnr is None or column in fagnr:

                    # We will match every row, when no fagnr is specified. But we still need to find the headers first.
                    if fagnr is None and None in {fagnummer_column_idx, maalpinde_column_idx, score_column_idx, resultatform_column_idx, fagkategori_column_idx}:
                        continue

                    if row[1][resultatform_column_idx] != '-/STA/7TRIN':
                        continue

                    if row[1][fagkategori_column_idx].lower() != 'Uddannelsesspecifikke fag'.lower():
                        continue

                    # By now, we should've found all the headers, and know the location of our columns-of-interest.
                    assert None not in {fagnummer_column_idx, maalpinde_column_idx, score_column_idx, resultatform_column_idx, fagkategori_column_idx}

                    if index != fagnummer_column_idx:
                        continue

                    # assert row[1][fagnummer_column_idx]  # .isnumeric() probably also includes floats
                    try:
                        key = int(row[1][fagnummer_column_idx])
                    except ValueError:
                        continue

                    if key not in tmp_maalepinde:
                        tmp_maalepinde[key] = set()
                    tmp_maalepinde[key].add((LEVEL_ORDER.index(row[1][score_column_idx]), row[1][maalpinde_column_idx]))

    # Now we want to find the 'set' of maalepinde with the highest scoring.
    if only_best:
        tmp_maalepinde: MAALEPINDE_FORMAT = {fagnr: {
            max(matches, key=(lambda maalepind_tpl: maalepind_tpl[0]))} for fagnr, matches in tmp_maalepinde.items()}

    # Use findall to extract matches
    # Remove leading and trailing whitespaces from each match
    tmp_maalepinde: MAALEPINDE_FORMAT = {fagnr: {(maalepinde_tpl[0], tuple(match.strip() for match in MAALEPIND_PATTERN.findall(maalepinde_tpl[1]))) for maalepinde_tpl in maalepinde_set} for fagnr, maalepinde_set in tmp_maalepinde.items()}

    return tmp_maalepinde


if __name__ == '__main__':

    # ml = hent_maalepinde(EXCEL_FILE, 17348)
    # for m in ml.values():
    #     for n in m:
    #         for i in n[1]:
    #             print(i)

    sw_test = hent_maalepinde(EXCEL_FILE, None, only_best=True, sheet=3)
    num_fags = len(sw_test)

    num_maalepinde = 0
    for maalepind_set in sw_test.values():
        for maalepind_tpl in maalepind_set:
            num_maalepinde += len(maalepind_tpl[1])
            # for maalepind in maalepind_tpl[1]:
            #     for word in maalepind.split():
            #         print(word, sep=' ')
            #         wc += 1

    no_stopwords = remove_stopwords(sw_test)
    wc = 0
    for maalepind in no_stopwords:
        for word in maalepind.split():
            wc += 1

    # for m in sw_test.values():
    #     for n in m:
    #         for i in n[1]:
    #             print(i)
    #
    # draw_diagram_words_used(remove_stopwords(sw_test))

    word_cloud(no_stopwords)
